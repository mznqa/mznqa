#pragma execution_character_set("utf-8")

#ifndef MZNQA_CLASSES_CARD_CARDBASE_H_
#define MZNQA_CLASSES_CARD_CARDBASE_H_

#include <string>

#include "cocos2d.h"

// 作为所有卡牌的基类，所有卡牌均继承于此
class CardBase
{
public:
	// 用以区分卡的类型
	// idBaseNum*0 ~ idBaseNum*1-1 ==> CardRoad
	// idBaseNum*1 ~ idBaseNum*2-1 ==> CardTreasure
	// idBaseNum*2 ~ idBaseNum*3-1 ==> CardMonster
	// idBaseNum*3 ~ idBaseNum*4-1 ==> CardSkill
	static const int idBaseNum = 10000;
public:
	// 定义无效id值，当id为该值时，卡牌无效
	static const int invalidID = -1;

	// 卡牌类型
	enum CardType
	{
		// 无效类型
		CardType_Invalid = -1,
		// 地形卡
		CardType_Road = idBaseNum * 0,
		// 宝物卡
		CardType_Treasure = idBaseNum * 1,
		// 怪物卡
		CardType_Monster = idBaseNum * 2,
		// 技能卡
		CardType_Skill = idBaseNum * 3
	};

	// 枚举卡牌所属方
	enum BelongTo
	{
		// 标识该卡牌仅仅属于角色
		BelongTo_RoleOnly = -1,
		// 标识该卡牌属于角色也属于怪物
		BelongTo_RoleMonsterBoth = 0,
		// 标识该卡牌仅仅属于怪物
		BelongTo_MonsterOnly = 1
	};

	// 根据给定id判断卡牌类型
	static CardType judgeCardTypeByID(int id)
	{
		if (id < 0)
			return CardType_Invalid;
		else if (id >= 40000)
			return CardType_Invalid;
		else
			return CardType(id / idBaseNum * idBaseNum);
	}

	// 构造一张无效的卡，id=-1,type=CardType_Incalid
	CardBase(
		int id,
		CardType type
		) :
		id(id),
		type(type),
		name(""),
		describe(""),
		belongTo(BelongTo_RoleMonsterBoth)
	{
		cocos2d::log("[warning] 生成一张空卡（即无效的卡:id=-1,type=CardType_Invalid）成功");
	}

	// 根据给定id和type构造一张卡
	CardBase(
		int id,
		CardType type,
		const std::string &name,
		const std::string &describe,
		BelongTo belongTo
		) :
		id(id),
		type(type),
		name(name),
		describe(describe),
		belongTo(belongTo)
	{
		if (id == -1 && type == CardType_Invalid)
		{
			cocos2d::log("[warning] 构造卡牌时有不确定行为，给定id为%d,type为CardType_None，此时将被声明为空卡（即无效的卡:id=-1,type=CardType_Invalid），请确定是否为有意行为", id);
			return;
		}

		if (id <= invalidID)
		{
			cocos2d::log("[warning] 构造卡牌失败，给定id(=%d)不合法，将被声明为空卡（即无效的卡:id=-1,type=CardType_Invalid）", id);
			id = -1;
			type = CardType_Invalid;
			return;
		}

		if (type < CardType_Invalid)
		{
			cocos2d::log("[warning] 构造卡牌失败，给定type(=%d)不合法，将被声明为空卡（即无效的卡:id=-1,type=CardType_None）", type);
			id = -1;
			type = CardType_Invalid;
			return;
		}

		if (!(type <= id && id < type + idBaseNum))
		{
			cocos2d::log("[warning] 构造卡牌失败，给定的id与给定卡牌类型不符，id=%d，type=%d", id, type);
			id = -1;
			type = CardType_Invalid;
			return;
		}

		cocos2d::log("[information] 成功创建一张卡牌，id=%d，type=%d", id, type);
	}

	virtual ~CardBase()
	{
	}

	// 获取卡id
	virtual int getID() const
	{
		return id;
	}

	// 获取卡type
	virtual CardType getType() const
	{
		return type;
	}

	// 获取卡牌名称
	virtual const std::string& getName() const
	{
		return name;
	}

	// 获取卡牌描述
	virtual const std::string& getDescribe() const
	{
		return describe;
	}

	// 获取卡牌所属方
	virtual const BelongTo getBelongTo() const
	{
		return belongTo;
	}

protected:
	// 这些作为静态数据不应修改他们 //////////////////////////////////////////////////////////////////////////
	// 卡牌ID
	int id;
	// 卡牌类型
	CardType type;
	// 卡牌名称
	std::string name;
	// 卡牌描述
	std::string describe;
	// 卡牌所属
	BelongTo belongTo;
	//////////////////////////////////////////////////////////////////////////
};

#endif
